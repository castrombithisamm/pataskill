{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/castro/Desktop/pataskill/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/castro/Desktop/pataskill/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar base64VLQ = require(\"./base64-vlq\");\nvar getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nvar getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\nvar LINE_MAPPING = \";AACA\";\nvar SourceNode = /*#__PURE__*/function () {\n  function SourceNode(generatedCode, source, originalSource, startingLine) {\n    _classCallCheck(this, SourceNode);\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.startingLine = startingLine || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n  _createClass(SourceNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);\n    }\n  }, {\n    key: \"getGeneratedCode\",\n    value: function getGeneratedCode() {\n      return this.generatedCode;\n    }\n  }, {\n    key: \"addGeneratedCode\",\n    value: function addGeneratedCode(code) {\n      this.generatedCode += code;\n      this._numberOfLines += getNumberOfLines(code);\n      this._endsWithNewLine = code[code.length - 1] === \"\\n\";\n    }\n  }, {\n    key: \"getMappings\",\n    value: function getMappings(mappingsContext) {\n      if (!this.generatedCode) return \"\";\n      var lines = this._numberOfLines;\n      var sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n      var mappings = \"A\"; // generated column 0\n      if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n      mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n      mappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index\n      mappings += \"A\"; // original column 0\n      mappingsContext.currentSource = sourceIdx;\n      mappingsContext.currentOriginalLine = this.startingLine + lines - 1;\n      var unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n      mappings += Array(lines).join(LINE_MAPPING);\n      if (unfinishedGeneratedLine === 0) {\n        mappings += \";\";\n      } else {\n        if (lines !== 0) {\n          mappings += LINE_MAPPING;\n        }\n        mappingsContext.currentOriginalLine++;\n      }\n      return mappings;\n    }\n  }, {\n    key: \"mapGeneratedCode\",\n    value: function mapGeneratedCode(fn) {\n      throw new Error(\"Cannot map generated code on a SourceMap. Normalize to SingleLineNode first.\");\n    }\n  }, {\n    key: \"getNormalizedNodes\",\n    value: function getNormalizedNodes() {\n      var results = [];\n      var currentLine = this.startingLine;\n      var generatedCode = this.generatedCode;\n      var index = 0;\n      var indexEnd = generatedCode.length;\n      while (index < indexEnd) {\n        // get one generated line\n        var nextLine = generatedCode.indexOf(\"\\n\", index) + 1;\n        if (nextLine === 0) nextLine = indexEnd;\n        var lineGenerated = generatedCode.substr(index, nextLine - index);\n        results.push(new SingleLineNode(lineGenerated, this.source, this.originalSource, currentLine));\n\n        // move cursors\n        index = nextLine;\n        currentLine++;\n      }\n      return results;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(otherNode) {\n      if (otherNode instanceof SourceNode) {\n        return this.mergeSourceNode(otherNode);\n      } else if (otherNode instanceof SingleLineNode) {\n        return this.mergeSingleLineNode(otherNode);\n      }\n      return false;\n    }\n  }, {\n    key: \"mergeSourceNode\",\n    value: function mergeSourceNode(otherNode) {\n      if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.startingLine) {\n        this.generatedCode += otherNode.generatedCode;\n        this._numberOfLines += otherNode._numberOfLines;\n        this._endsWithNewLine = otherNode._endsWithNewLine;\n        return this;\n      }\n      return false;\n    }\n  }, {\n    key: \"mergeSingleLineNode\",\n    value: function mergeSingleLineNode(otherNode) {\n      if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.line && otherNode._numberOfLines <= 1) {\n        this.addSingleLineNode(otherNode);\n        return this;\n      }\n      return false;\n    }\n  }, {\n    key: \"addSingleLineNode\",\n    value: function addSingleLineNode(otherNode) {\n      this.generatedCode += otherNode.generatedCode;\n      this._numberOfLines += otherNode._numberOfLines;\n      this._endsWithNewLine = otherNode._endsWithNewLine;\n    }\n  }]);\n  return SourceNode;\n}();\nmodule.exports = SourceNode;\nvar SingleLineNode = require(\"./SingleLineNode\"); // circular dependency","map":{"version":3,"names":["base64VLQ","require","getNumberOfLines","getUnfinishedLine","LINE_MAPPING","SourceNode","generatedCode","source","originalSource","startingLine","_numberOfLines","_endsWithNewLine","length","code","mappingsContext","lines","sourceIdx","ensureSource","mappings","unfinishedGeneratedLine","encode","currentSource","currentOriginalLine","Array","join","fn","Error","results","currentLine","index","indexEnd","nextLine","indexOf","lineGenerated","substr","push","SingleLineNode","otherNode","mergeSourceNode","mergeSingleLineNode","line","addSingleLineNode","module","exports"],"sources":["/home/castro/node_modules/source-list-map/lib/SourceNode.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AACA\";\n\nclass SourceNode {\n\n\tconstructor(generatedCode, source, originalSource, startingLine) {\n\t\tthis.generatedCode = generatedCode;\n\t\tthis.originalSource = originalSource;\n\t\tthis.source = source;\n\t\tthis.startingLine = startingLine || 1;\n\t\tthis._numberOfLines = getNumberOfLines(this.generatedCode);\n\t\tthis._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n\t}\n\n\tclone() {\n\t\treturn new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\taddGeneratedCode(code) {\n\t\tthis.generatedCode += code;\n\t\tthis._numberOfLines += getNumberOfLines(code);\n\t\tthis._endsWithNewLine = code[code.length - 1] === \"\\n\";\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tif(!this.generatedCode)\n\t\t\treturn \"\";\n\t\tconst lines = this._numberOfLines;\n\t\tconst sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n\t\tlet mappings = \"A\"; // generated column 0\n\t\tif(mappingsContext.unfinishedGeneratedLine)\n\t\t\tmappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n\t\tmappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\t\tmappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index\n\t\tmappings += \"A\"; // original column 0\n\t\tmappingsContext.currentSource = sourceIdx;\n\t\tmappingsContext.currentOriginalLine = this.startingLine + lines - 1;\n\t\tconst unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode)\n\t\tmappings += Array(lines).join(LINE_MAPPING);\n\t\tif(unfinishedGeneratedLine === 0) {\n\t\t\tmappings += \";\";\n\t\t} else {\n\t\t\tif(lines !== 0) {\n\t\t\t\tmappings += LINE_MAPPING;\n\t\t\t}\n\t\t\tmappingsContext.currentOriginalLine++;\n\t\t}\n\t\treturn mappings;\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tthrow new Error(\"Cannot map generated code on a SourceMap. Normalize to SingleLineNode first.\");\n\t}\n\n\tgetNormalizedNodes() {\n\t\tvar results = [];\n\t\tvar currentLine = this.startingLine;\n\t\tvar generatedCode = this.generatedCode;\n\t\tvar index = 0;\n\t\tvar indexEnd = generatedCode.length;\n\t\twhile(index < indexEnd) {\n\t\t\t// get one generated line\n\t\t\tvar nextLine = generatedCode.indexOf(\"\\n\", index) + 1;\n\t\t\tif(nextLine === 0) nextLine = indexEnd;\n\t\t\tvar lineGenerated = generatedCode.substr(index, nextLine - index);\n\n\t\t\tresults.push(new SingleLineNode(lineGenerated, this.source, this.originalSource, currentLine));\n\n\t\t\t// move cursors\n\t\t\tindex = nextLine;\n\t\t\tcurrentLine++;\n\t\t}\n\t\treturn results;\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof SourceNode) {\n\t\t\treturn this.mergeSourceNode(otherNode);\n\t\t} else if(otherNode instanceof SingleLineNode) {\n\t\t\treturn this.mergeSingleLineNode(otherNode);\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSourceNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis._endsWithNewLine &&\n\t\t\tthis.startingLine + this._numberOfLines === otherNode.startingLine) {\n\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\tthis._numberOfLines += otherNode._numberOfLines;\n\t\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t\t\treturn this;\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSingleLineNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis._endsWithNewLine &&\n\t\t\tthis.startingLine + this._numberOfLines === otherNode.line &&\n\t\t\totherNode._numberOfLines <= 1) {\n\t\t\tthis.addSingleLineNode(otherNode);\n\t\t\treturn this;\n\t\t}\n\t\treturn false;\n\t}\n\n\taddSingleLineNode(otherNode) {\n\t\tthis.generatedCode += otherNode.generatedCode;\n\t\tthis._numberOfLines += otherNode._numberOfLines\n\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t}\n}\n\nmodule.exports = SourceNode;\nconst SingleLineNode = require(\"./SingleLineNode\"); // circular dependency\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAEb,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAc,CAAC;AACzC,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,WAAW,CAAC,CAACC,gBAAgB;AAC9D,IAAMC,iBAAiB,GAAGF,OAAO,CAAC,WAAW,CAAC,CAACE,iBAAiB;AAEhE,IAAMC,YAAY,GAAG,OAAO;AAAC,IAEvBC,UAAU;EAEf,oBAAYC,aAAa,EAAEC,MAAM,EAAEC,cAAc,EAAEC,YAAY,EAAE;IAAA;IAChE,IAAI,CAACH,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACE,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,YAAY,GAAGA,YAAY,IAAI,CAAC;IACrC,IAAI,CAACC,cAAc,GAAGR,gBAAgB,CAAC,IAAI,CAACI,aAAa,CAAC;IAC1D,IAAI,CAACK,gBAAgB,GAAGL,aAAa,CAACA,aAAa,CAACM,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI;EACzE;EAAC;IAAA;IAAA,OAED,iBAAQ;MACP,OAAO,IAAIP,UAAU,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAACC,YAAY,CAAC;IAC/F;EAAC;IAAA;IAAA,OAED,4BAAmB;MAClB,OAAO,IAAI,CAACH,aAAa;IAC1B;EAAC;IAAA;IAAA,OAED,0BAAiBO,IAAI,EAAE;MACtB,IAAI,CAACP,aAAa,IAAIO,IAAI;MAC1B,IAAI,CAACH,cAAc,IAAIR,gBAAgB,CAACW,IAAI,CAAC;MAC7C,IAAI,CAACF,gBAAgB,GAAGE,IAAI,CAACA,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI;IACvD;EAAC;IAAA;IAAA,OAED,qBAAYE,eAAe,EAAE;MAC5B,IAAG,CAAC,IAAI,CAACR,aAAa,EACrB,OAAO,EAAE;MACV,IAAMS,KAAK,GAAG,IAAI,CAACL,cAAc;MACjC,IAAMM,SAAS,GAAGF,eAAe,CAACG,YAAY,CAAC,IAAI,CAACV,MAAM,EAAE,IAAI,CAACC,cAAc,CAAC;MAChF,IAAIU,QAAQ,GAAG,GAAG,CAAC,CAAC;MACpB,IAAGJ,eAAe,CAACK,uBAAuB,EACzCD,QAAQ,GAAG,GAAG,GAAGlB,SAAS,CAACoB,MAAM,CAACN,eAAe,CAACK,uBAAuB,CAAC;MAC3ED,QAAQ,IAAIlB,SAAS,CAACoB,MAAM,CAACJ,SAAS,GAAGF,eAAe,CAACO,aAAa,CAAC,CAAC,CAAC;MACzEH,QAAQ,IAAIlB,SAAS,CAACoB,MAAM,CAAC,IAAI,CAACX,YAAY,GAAGK,eAAe,CAACQ,mBAAmB,CAAC,CAAC,CAAC;MACvFJ,QAAQ,IAAI,GAAG,CAAC,CAAC;MACjBJ,eAAe,CAACO,aAAa,GAAGL,SAAS;MACzCF,eAAe,CAACQ,mBAAmB,GAAG,IAAI,CAACb,YAAY,GAAGM,KAAK,GAAG,CAAC;MACnE,IAAMI,uBAAuB,GAAGL,eAAe,CAACK,uBAAuB,GAAGhB,iBAAiB,CAAC,IAAI,CAACG,aAAa,CAAC;MAC/GY,QAAQ,IAAIK,KAAK,CAACR,KAAK,CAAC,CAACS,IAAI,CAACpB,YAAY,CAAC;MAC3C,IAAGe,uBAAuB,KAAK,CAAC,EAAE;QACjCD,QAAQ,IAAI,GAAG;MAChB,CAAC,MAAM;QACN,IAAGH,KAAK,KAAK,CAAC,EAAE;UACfG,QAAQ,IAAId,YAAY;QACzB;QACAU,eAAe,CAACQ,mBAAmB,EAAE;MACtC;MACA,OAAOJ,QAAQ;IAChB;EAAC;IAAA;IAAA,OAED,0BAAiBO,EAAE,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,8EAA8E,CAAC;IAChG;EAAC;IAAA;IAAA,OAED,8BAAqB;MACpB,IAAIC,OAAO,GAAG,EAAE;MAChB,IAAIC,WAAW,GAAG,IAAI,CAACnB,YAAY;MACnC,IAAIH,aAAa,GAAG,IAAI,CAACA,aAAa;MACtC,IAAIuB,KAAK,GAAG,CAAC;MACb,IAAIC,QAAQ,GAAGxB,aAAa,CAACM,MAAM;MACnC,OAAMiB,KAAK,GAAGC,QAAQ,EAAE;QACvB;QACA,IAAIC,QAAQ,GAAGzB,aAAa,CAAC0B,OAAO,CAAC,IAAI,EAAEH,KAAK,CAAC,GAAG,CAAC;QACrD,IAAGE,QAAQ,KAAK,CAAC,EAAEA,QAAQ,GAAGD,QAAQ;QACtC,IAAIG,aAAa,GAAG3B,aAAa,CAAC4B,MAAM,CAACL,KAAK,EAAEE,QAAQ,GAAGF,KAAK,CAAC;QAEjEF,OAAO,CAACQ,IAAI,CAAC,IAAIC,cAAc,CAACH,aAAa,EAAE,IAAI,CAAC1B,MAAM,EAAE,IAAI,CAACC,cAAc,EAAEoB,WAAW,CAAC,CAAC;;QAE9F;QACAC,KAAK,GAAGE,QAAQ;QAChBH,WAAW,EAAE;MACd;MACA,OAAOD,OAAO;IACf;EAAC;IAAA;IAAA,OAED,eAAMU,SAAS,EAAE;MAChB,IAAGA,SAAS,YAAYhC,UAAU,EAAE;QACnC,OAAO,IAAI,CAACiC,eAAe,CAACD,SAAS,CAAC;MACvC,CAAC,MAAM,IAAGA,SAAS,YAAYD,cAAc,EAAE;QAC9C,OAAO,IAAI,CAACG,mBAAmB,CAACF,SAAS,CAAC;MAC3C;MACA,OAAO,KAAK;IACb;EAAC;IAAA;IAAA,OAED,yBAAgBA,SAAS,EAAE;MAC1B,IAAG,IAAI,CAAC9B,MAAM,KAAK8B,SAAS,CAAC9B,MAAM,IAClC,IAAI,CAACI,gBAAgB,IACrB,IAAI,CAACF,YAAY,GAAG,IAAI,CAACC,cAAc,KAAK2B,SAAS,CAAC5B,YAAY,EAAE;QACpE,IAAI,CAACH,aAAa,IAAI+B,SAAS,CAAC/B,aAAa;QAC7C,IAAI,CAACI,cAAc,IAAI2B,SAAS,CAAC3B,cAAc;QAC/C,IAAI,CAACC,gBAAgB,GAAG0B,SAAS,CAAC1B,gBAAgB;QAClD,OAAO,IAAI;MACZ;MACA,OAAO,KAAK;IACb;EAAC;IAAA;IAAA,OAED,6BAAoB0B,SAAS,EAAE;MAC9B,IAAG,IAAI,CAAC9B,MAAM,KAAK8B,SAAS,CAAC9B,MAAM,IAClC,IAAI,CAACI,gBAAgB,IACrB,IAAI,CAACF,YAAY,GAAG,IAAI,CAACC,cAAc,KAAK2B,SAAS,CAACG,IAAI,IAC1DH,SAAS,CAAC3B,cAAc,IAAI,CAAC,EAAE;QAC/B,IAAI,CAAC+B,iBAAiB,CAACJ,SAAS,CAAC;QACjC,OAAO,IAAI;MACZ;MACA,OAAO,KAAK;IACb;EAAC;IAAA;IAAA,OAED,2BAAkBA,SAAS,EAAE;MAC5B,IAAI,CAAC/B,aAAa,IAAI+B,SAAS,CAAC/B,aAAa;MAC7C,IAAI,CAACI,cAAc,IAAI2B,SAAS,CAAC3B,cAAc;MAC/C,IAAI,CAACC,gBAAgB,GAAG0B,SAAS,CAAC1B,gBAAgB;IACnD;EAAC;EAAA;AAAA;AAGF+B,MAAM,CAACC,OAAO,GAAGtC,UAAU;AAC3B,IAAM+B,cAAc,GAAGnC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"script"}